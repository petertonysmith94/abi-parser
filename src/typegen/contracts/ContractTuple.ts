/* Autogenerated file. Do not edit manually. */

/* eslint-disable max-classes-per-file */
/* eslint-disable @typescript-eslint/no-unused-vars */
/* eslint-disable @typescript-eslint/consistent-type-imports */

/*
  Fuels version: 0.94.3
  Forc version: 0.63.3
  Fuel-Core version: 0.34.0
*/

import { Contract, Interface } from "fuels";
import type {
  Provider,
  Account,
  StorageSlot,
  AbstractAddress,
  BigNumberish,
  FunctionFragment,
  InvokeFunction,
} from 'fuels';

export type GenericNestedLevelFourInput<Four> = { four: Four };
export type GenericNestedLevelFourOutput<Four> = GenericNestedLevelFourInput<Four>;
export type GenericNestedLevelOneInput<One> = { one: GenericNestedLevelTwoInput<One> };
export type GenericNestedLevelOneOutput<One> = { one: GenericNestedLevelTwoOutput<One> };
export type GenericNestedLevelThreeInput<Three> = { three: GenericNestedLevelFourInput<Three> };
export type GenericNestedLevelThreeOutput<Three> = { three: GenericNestedLevelFourOutput<Three> };
export type GenericNestedLevelTwoInput<Two> = { two: GenericNestedLevelThreeInput<Two> };
export type GenericNestedLevelTwoOutput<Two> = { two: GenericNestedLevelThreeOutput<Two> };

const abi = {
  "programType": "contract",
  "specVersion": "1",
  "encodingVersion": "1",
  "concreteTypes": [
    {
      "type": "()",
      "concreteTypeId": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d"
    },
    {
      "type": "struct GenericNestedLevelOne<u8>",
      "concreteTypeId": "a8fccc38f83652e6552bc2465f0f653f7176dfc30f06b930be98b6e2839e421d",
      "metadataTypeId": 5,
      "typeArguments": [
        {
          "type": "u8",
          "concreteTypeId": "c89951a24c6ca28c13fd1cfdc646b2b656d69e61a92b91023be7eb58eb914b6b"
        }
      ]
    },

  ],
  "metadataTypes": [
    {
      "type": "generic Four",
      "metadataTypeId": 0
    },
    {
      "type": "generic One",
      "metadataTypeId": 1
    },
    {
      "type": "generic Three",
      "metadataTypeId": 2
    },
    {
      "type": "generic Two",
      "metadataTypeId": 3
    },
    {
      "type": "struct GenericNestedLevelFour",
      "metadataTypeId": 4,
      "components": [
        {
          "name": "four",
          "typeId": 0
        }
      ],
      "typeParameters": [
        0
      ]
    },
    {
      "type": "struct GenericNestedLevelOne",
      "metadataTypeId": 5,
      "components": [
        {
          "name": "one",
          "typeId": 7,
          "typeArguments": [
            {
              "name": "",
              "typeId": 1
            }
          ]
        }
      ],
      "typeParameters": [
        1
      ]
    },
    {
      "type": "struct GenericNestedLevelThree",
      "metadataTypeId": 6,
      "components": [
        {
          "name": "three",
          "typeId": 4,
          "typeArguments": [
            {
              "name": "",
              "typeId": 2
            }
          ]
        }
      ],
      "typeParameters": [
        2
      ]
    },
    {
      "type": "struct GenericNestedLevelTwo",
      "metadataTypeId": 7,
      "components": [
        {
          "name": "two",
          "typeId": 6,
          "typeArguments": [
            {
              "name": "",
              "typeId": 3
            }
          ]
        }
      ],
      "typeParameters": [
        3
      ]
    }
  ],
  "functions": [
    {
      "inputs": [
        {
          "name": "arg1",
          "concreteTypeId": "a8fccc38f83652e6552bc2465f0f653f7176dfc30f06b930be98b6e2839e421d"
        }
      ],
      "name": "generic",
      "output": "2e38e77b22c314a449e91fafed92a43826ac6aa403ae6a8acb6cf58239fbaf5d",
      "attributes": null
    }
  ],
  "loggedTypes": [],
  "messagesTypes": [],
  "configurables": []
};

const storageSlots: StorageSlot[] = [];

export class ContractTupleInterface extends Interface {
  constructor() {
    super(abi);
  }

  declare functions: {
    generic: FunctionFragment;
  };
}

export class ContractTuple extends Contract {
  static readonly abi = abi;
  static readonly storageSlots = storageSlots;

  declare interface: ContractTupleInterface;
  declare functions: {
    generic: InvokeFunction<[arg1: GenericNestedLevelOneInput<BigNumberish>], void>;
  };

  constructor(
    id: string | AbstractAddress,
    accountOrProvider: Account | Provider,
  ) {
    super(id, abi, accountOrProvider);
  }
}
